<project name="DiaSynth" basedir="." default="main">

    <property name="src.dir"     value="src"/>

    <property name="build.dir"   value="build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>
    <property name="jar.dir"     value="${build.dir}/jar"/>
	<property name="jar.file"     value="${jar.dir}/${ant.project.name}.jar"/>
	
	<property name="resources.dir"     value="resources"/>
	<property name="images.dir"     value="${resources.dir}/images"/>

    <property name="main-class"  value="PartsConnectingGUI.Main"/>

    <property name="lib.dir"     value="libs"/>

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
    </path>
	
	<!-- 
	Solving the issue of libraries for the jar - we have to add it to manifest.
	https://stackoverflow.com/questions/1949738/how-can-include-multiple-jars-in-the-classpath-using-ant 
	-->
	<manifestclasspath property="manifest.classpath" jarfile="${jar.file}">
		<classpath refid="classpath"/>
	</manifestclasspath>
    

    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>

    <target name="compile">
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath"/>
    </target>

    <target name="run" depends="jar">
        <java fork="true" classname="${main-class}">
            <classpath>
				<path refid="classpath"/>
                <path location="${jar.file}"/>
            </classpath>
        </java>
    </target>

    <target name="jar" depends="compile">
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.file}" basedir="${classes.dir}">
            <manifest>
                <attribute name="Main-Class" value="${main-class}"/>
				<attribute name="Class-Path" value="${manifest.classpath}"/>
            </manifest>
			<!-- 
				Including the images and libraries inside the jar.
			     The libraries don't really make sense, since based on 
				 https://stackoverflow.com/questions/183292/classpath-including-jar-within-a-jar
				 you can't add the inside of jar to classpath, unless you code your own
				 classloader or use some project which does it for you (like One-Jar).
				 I put the images  inside the jar, but idk, maybe I will allow to read it from
				 the resources directory outside the JAR, because then the user can
				 easily change the images as he pleases, but it isn't really important.
			<zipfileset dir="${lib.dir}" prefix="${lib.dir}" />
			-->
			<zipfileset dir="${images.dir}" prefix="${images.dir}" />
        </jar>
    </target>
	

    

    <target name="clean-build" depends="clean,jar"/>

    <target name="main" depends="clean,run"/>

</project>